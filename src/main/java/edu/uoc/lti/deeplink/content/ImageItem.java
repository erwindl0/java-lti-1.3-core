// Generated by delombok at Fri Jul 14 17:42:49 CEST 2023
package edu.uoc.lti.deeplink.content;

import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * @author Created by xaracil@uoc.edu
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class ImageItem extends Item {
	private static String TYPE = "image";
	/**
	 * Fully qualified URL of the image.
	 */
	private final String url;
	/**
	 * String, plain text to use as the title or heading for content.
	 */
	private String title;
	/**
	 * String, plain text description of the content item intended to be displayed to all users who can access the item.
	 */
	private String text;
	/**
	 * Fully qualified URL of an icon image to be placed with the file. A platform may not support the display of icons,
	 * but where it does, it may choose to use a local copy of the icon rather than linking to the URL provided
	 * (which would also allow it to resize the image to suit its needs).
	 */
	private Image icon;
	/**
	 * Fully qualified URL of a thumbnail image to be made a hyperlink. This allows the hyperlink to be opened within the
	 * platform from text or an image, or from both.
	 */
	private Image thumbnail;
	/**
	 * Integer representing the width in pixels of the image.
	 */
	private int width;
	/**
	 * Integer representing the height in pixels of the image.
	 */
	private int height;

	public ImageItem(String url) {
		super(TYPE);
		this.url = url;
	}

	public ImageItem(String url, String title, String text, Image icon, Image thumbnail, int width, int height) {
		this(url);
		this.title = title;
		this.text = text;
		this.icon = icon;
		this.thumbnail = thumbnail;
		this.width = width;
		this.height = height;
	}


	@java.lang.SuppressWarnings("all")
	public static class ImageItemBuilder {
		@java.lang.SuppressWarnings("all")
		private String url;
		@java.lang.SuppressWarnings("all")
		private String title;
		@java.lang.SuppressWarnings("all")
		private String text;
		@java.lang.SuppressWarnings("all")
		private Image icon;
		@java.lang.SuppressWarnings("all")
		private Image thumbnail;
		@java.lang.SuppressWarnings("all")
		private int width;
		@java.lang.SuppressWarnings("all")
		private int height;

		@java.lang.SuppressWarnings("all")
		ImageItemBuilder() {
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public ImageItem.ImageItemBuilder url(final String url) {
			this.url = url;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public ImageItem.ImageItemBuilder title(final String title) {
			this.title = title;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public ImageItem.ImageItemBuilder text(final String text) {
			this.text = text;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public ImageItem.ImageItemBuilder icon(final Image icon) {
			this.icon = icon;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public ImageItem.ImageItemBuilder thumbnail(final Image thumbnail) {
			this.thumbnail = thumbnail;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public ImageItem.ImageItemBuilder width(final int width) {
			this.width = width;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public ImageItem.ImageItemBuilder height(final int height) {
			this.height = height;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		public ImageItem build() {
			return new ImageItem(this.url, this.title, this.text, this.icon, this.thumbnail, this.width, this.height);
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public java.lang.String toString() {
			return "ImageItem.ImageItemBuilder(url=" + this.url + ", title=" + this.title + ", text=" + this.text + ", icon=" + this.icon + ", thumbnail=" + this.thumbnail + ", width=" + this.width + ", height=" + this.height + ")";
		}
	}

	@java.lang.SuppressWarnings("all")
	public static ImageItem.ImageItemBuilder builder() {
		return new ImageItem.ImageItemBuilder();
	}

	/**
	 * Fully qualified URL of the image.
	 */
	@java.lang.SuppressWarnings("all")
	public String getUrl() {
		return this.url;
	}

	/**
	 * String, plain text to use as the title or heading for content.
	 */
	@java.lang.SuppressWarnings("all")
	public String getTitle() {
		return this.title;
	}

	/**
	 * String, plain text description of the content item intended to be displayed to all users who can access the item.
	 */
	@java.lang.SuppressWarnings("all")
	public String getText() {
		return this.text;
	}

	/**
	 * Fully qualified URL of an icon image to be placed with the file. A platform may not support the display of icons,
	 * but where it does, it may choose to use a local copy of the icon rather than linking to the URL provided
	 * (which would also allow it to resize the image to suit its needs).
	 */
	@java.lang.SuppressWarnings("all")
	public Image getIcon() {
		return this.icon;
	}

	/**
	 * Fully qualified URL of a thumbnail image to be made a hyperlink. This allows the hyperlink to be opened within the
	 * platform from text or an image, or from both.
	 */
	@java.lang.SuppressWarnings("all")
	public Image getThumbnail() {
		return this.thumbnail;
	}

	/**
	 * Integer representing the width in pixels of the image.
	 */
	@java.lang.SuppressWarnings("all")
	public int getWidth() {
		return this.width;
	}

	/**
	 * Integer representing the height in pixels of the image.
	 */
	@java.lang.SuppressWarnings("all")
	public int getHeight() {
		return this.height;
	}

	/**
	 * String, plain text to use as the title or heading for content.
	 */
	@java.lang.SuppressWarnings("all")
	public void setTitle(final String title) {
		this.title = title;
	}

	/**
	 * String, plain text description of the content item intended to be displayed to all users who can access the item.
	 */
	@java.lang.SuppressWarnings("all")
	public void setText(final String text) {
		this.text = text;
	}

	/**
	 * Fully qualified URL of an icon image to be placed with the file. A platform may not support the display of icons,
	 * but where it does, it may choose to use a local copy of the icon rather than linking to the URL provided
	 * (which would also allow it to resize the image to suit its needs).
	 */
	@java.lang.SuppressWarnings("all")
	public void setIcon(final Image icon) {
		this.icon = icon;
	}

	/**
	 * Fully qualified URL of a thumbnail image to be made a hyperlink. This allows the hyperlink to be opened within the
	 * platform from text or an image, or from both.
	 */
	@java.lang.SuppressWarnings("all")
	public void setThumbnail(final Image thumbnail) {
		this.thumbnail = thumbnail;
	}

	/**
	 * Integer representing the width in pixels of the image.
	 */
	@java.lang.SuppressWarnings("all")
	public void setWidth(final int width) {
		this.width = width;
	}

	/**
	 * Integer representing the height in pixels of the image.
	 */
	@java.lang.SuppressWarnings("all")
	public void setHeight(final int height) {
		this.height = height;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "ImageItem(super=" + super.toString() + ", url=" + this.getUrl() + ", title=" + this.getTitle() + ", text=" + this.getText() + ", icon=" + this.getIcon() + ", thumbnail=" + this.getThumbnail() + ", width=" + this.getWidth() + ", height=" + this.getHeight() + ")";
	}
}
