// Generated by delombok at Fri Jul 14 17:42:49 CEST 2023
package edu.uoc.lti.deeplink.content;

import java.time.Instant;

/**
 * @author Created by xaracil@uoc.edu
 */
public class FileItem extends Item {
	private static String TYPE = "file";
	/**
	 * String, plain text to use as the title or heading for content.
	 */
	private String title;
	/**
	 * Fully qualified URL of the resource. This link may be short-lived or expire after 1st use.
	 */
	private final String url;
	/**
	 * String, plain text to use as the title or heading for content.
	 */
	private String text;
	/**
	 * Fully qualified URL of an icon image to be placed with the file.
	 * A platform may not support the display of icons, but where it does, it may choose to use a local copy of the icon
	 * rather than linking to the URL provided (which would also allow it to resize the image to suit its needs).
	 */
	private Image icon;
	/**
	 * Fully qualified URL of a thumbnail image to be made a hyperlink.
	 * This allows the hyperlink to be opened within the platform from text or an image, or from both.
	 */
	private Image thumbnail;
	/**
	 */
	private String mediaType;
	/**
	 * ISO 8601 Date and time [ISO8601]. The URL will be available until this time. No guarantees after that. (e.g. 2014-03-05T12:34:56Z).
	 */
	private Instant expiresAt;

	public String getExpiresAt() {
		return expiresAt != null ? expiresAt.toString() : null;
	}

	public FileItem(String url) {
		super(TYPE);
		this.url = url;
	}

	public FileItem(String title, String url, String mediaType, Instant expiresAt) {
		this(url);
		this.title = title;
		this.mediaType = mediaType;
		this.expiresAt = expiresAt;
	}


	@java.lang.SuppressWarnings("all")
	public static class FileItemBuilder {
		@java.lang.SuppressWarnings("all")
		private String title;
		@java.lang.SuppressWarnings("all")
		private String url;
		@java.lang.SuppressWarnings("all")
		private String mediaType;
		@java.lang.SuppressWarnings("all")
		private Instant expiresAt;

		@java.lang.SuppressWarnings("all")
		FileItemBuilder() {
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public FileItem.FileItemBuilder title(final String title) {
			this.title = title;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public FileItem.FileItemBuilder url(final String url) {
			this.url = url;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public FileItem.FileItemBuilder mediaType(final String mediaType) {
			this.mediaType = mediaType;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public FileItem.FileItemBuilder expiresAt(final Instant expiresAt) {
			this.expiresAt = expiresAt;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		public FileItem build() {
			return new FileItem(this.title, this.url, this.mediaType, this.expiresAt);
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public java.lang.String toString() {
			return "FileItem.FileItemBuilder(title=" + this.title + ", url=" + this.url + ", mediaType=" + this.mediaType + ", expiresAt=" + this.expiresAt + ")";
		}
	}

	@java.lang.SuppressWarnings("all")
	public static FileItem.FileItemBuilder builder() {
		return new FileItem.FileItemBuilder();
	}

	/**
	 * String, plain text to use as the title or heading for content.
	 */
	@java.lang.SuppressWarnings("all")
	public void setTitle(final String title) {
		this.title = title;
	}

	/**
	 * String, plain text to use as the title or heading for content.
	 */
	@java.lang.SuppressWarnings("all")
	public void setText(final String text) {
		this.text = text;
	}

	/**
	 * Fully qualified URL of an icon image to be placed with the file.
	 * A platform may not support the display of icons, but where it does, it may choose to use a local copy of the icon
	 * rather than linking to the URL provided (which would also allow it to resize the image to suit its needs).
	 */
	@java.lang.SuppressWarnings("all")
	public void setIcon(final Image icon) {
		this.icon = icon;
	}

	/**
	 * Fully qualified URL of a thumbnail image to be made a hyperlink.
	 * This allows the hyperlink to be opened within the platform from text or an image, or from both.
	 */
	@java.lang.SuppressWarnings("all")
	public void setThumbnail(final Image thumbnail) {
		this.thumbnail = thumbnail;
	}

	/**
	 */
	@java.lang.SuppressWarnings("all")
	public void setMediaType(final String mediaType) {
		this.mediaType = mediaType;
	}

	/**
	 * ISO 8601 Date and time [ISO8601]. The URL will be available until this time. No guarantees after that. (e.g. 2014-03-05T12:34:56Z).
	 */
	@java.lang.SuppressWarnings("all")
	public void setExpiresAt(final Instant expiresAt) {
		this.expiresAt = expiresAt;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "FileItem(super=" + super.toString() + ", title=" + this.getTitle() + ", url=" + this.getUrl() + ", text=" + this.getText() + ", icon=" + this.getIcon() + ", thumbnail=" + this.getThumbnail() + ", mediaType=" + this.getMediaType() + ", expiresAt=" + this.getExpiresAt() + ")";
	}

	/**
	 * String, plain text to use as the title or heading for content.
	 */
	@java.lang.SuppressWarnings("all")
	public String getTitle() {
		return this.title;
	}

	/**
	 * Fully qualified URL of the resource. This link may be short-lived or expire after 1st use.
	 */
	@java.lang.SuppressWarnings("all")
	public String getUrl() {
		return this.url;
	}

	/**
	 * String, plain text to use as the title or heading for content.
	 */
	@java.lang.SuppressWarnings("all")
	public String getText() {
		return this.text;
	}

	/**
	 * Fully qualified URL of an icon image to be placed with the file.
	 * A platform may not support the display of icons, but where it does, it may choose to use a local copy of the icon
	 * rather than linking to the URL provided (which would also allow it to resize the image to suit its needs).
	 */
	@java.lang.SuppressWarnings("all")
	public Image getIcon() {
		return this.icon;
	}

	/**
	 * Fully qualified URL of a thumbnail image to be made a hyperlink.
	 * This allows the hyperlink to be opened within the platform from text or an image, or from both.
	 */
	@java.lang.SuppressWarnings("all")
	public Image getThumbnail() {
		return this.thumbnail;
	}

	/**
	 */
	@java.lang.SuppressWarnings("all")
	public String getMediaType() {
		return this.mediaType;
	}
}
