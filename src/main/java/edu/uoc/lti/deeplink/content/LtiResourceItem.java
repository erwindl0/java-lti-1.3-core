// Generated by delombok at Fri Jul 14 17:42:49 CEST 2023
package edu.uoc.lti.deeplink.content;

import com.fasterxml.jackson.annotation.JsonInclude;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Created by xaracil@uoc.edu
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class LtiResourceItem extends Item {
	private static String TYPE = "ltiResourceLink";
	/**
	 * String, plain text to use as the title or heading for content.
	 */
	private String title;
	/**
	 * Fully qualified url of the resource. If absent, the base LTI URL of the tool must be used for launch.
	 */
	private String url;
	private Presentation presentation;
	/**
	 * Fully qualified URL of an icon image to be placed with the file. A platform may not support the display of icons,
	 * but where it does, it may choose to use a local copy of the icon rather than linking to the URL provided (which
	 * would also allow it to resize the image to suit its needs).
	 */
	private Image icon;
	/**
	 * Fully qualified URL of a thumbnail image to be made a hyperlink. This allows the hyperlink to be opened within
	 * the platform from text or an image, or from both.
	 */
	private Image thumbnail;
	/**
	 * A map of key/value custom parameters. Those parameters must be included in the LtiResourceLinkRequest payload.
	 * Value may include substitution parameters as defined in the LTI Core Specification [LTI-13].
	 */
	private Map<String, Object> custom = new HashMap<>();
	private Window window;
	/**
	 * The iframe property indicates the resource can be embedded using an IFrame
	 */
	private IFrame iFrame;
	/**
	 * A lineItem object that indicates this activity is expected to receive scores; the platform may automatically
	 * create a corresponding line item when the resource link is created, using the maximum score as the default maximum points.
	 */
	private LineItem lineItem;
	/**
	 * Indicates the initial start and end time this activity should be made available to learners. A platform may choose
	 * to make an item not accessible by hiding it, or by disabling the link, or some other method which prevents the link
	 * from being opened by a learner. The initial value may subsequently be changed within the platform and the tool may use
	 * the ResourceLink.available.startDateTime and ResourceLink.available.endDateTime substitution parameters defined in
	 * LTI Core specification [LTI-13] within custom parameters to get the actual values at launch time.
	 */
	private Duration available;
	/**
	 * Indicates the initial start and end time submissions for this activity can be made by learners. The initial value
	 * may subsequently be changed within the platform and the tool may use the ResourceLink.submission.startDateTime and
	 * ResourceLink.submission.endDateTime substitution parameters defined in LTI Core specification [LTI-13] within
	 * custom parameters to get the actual values at launch time.
	 */
	private Duration submission;

	public LtiResourceItem() {
		super(TYPE);
	}

	public LtiResourceItem(String title, String url, Presentation presentation, Image icon, Image thumbnail, Window window, IFrame iFrame, Duration available, Duration submission, Map<String, Object> custom) {
		this();
		this.title = title;
		this.url = url;
		this.presentation = presentation;
		this.icon = icon;
		this.thumbnail = thumbnail;
		this.window = window;
		this.iFrame = iFrame;
		this.available = available;
		this.submission = submission;
		this.custom = custom;
	}


	@java.lang.SuppressWarnings("all")
	public static class LtiResourceItemBuilder {
		@java.lang.SuppressWarnings("all")
		private String title;
		@java.lang.SuppressWarnings("all")
		private String url;
		@java.lang.SuppressWarnings("all")
		private Presentation presentation;
		@java.lang.SuppressWarnings("all")
		private Image icon;
		@java.lang.SuppressWarnings("all")
		private Image thumbnail;
		@java.lang.SuppressWarnings("all")
		private Window window;
		@java.lang.SuppressWarnings("all")
		private IFrame iFrame;
		@java.lang.SuppressWarnings("all")
		private Duration available;
		@java.lang.SuppressWarnings("all")
		private Duration submission;
		@java.lang.SuppressWarnings("all")
		private Map<String, Object> custom;

		@java.lang.SuppressWarnings("all")
		LtiResourceItemBuilder() {
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LtiResourceItem.LtiResourceItemBuilder title(final String title) {
			this.title = title;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LtiResourceItem.LtiResourceItemBuilder url(final String url) {
			this.url = url;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LtiResourceItem.LtiResourceItemBuilder presentation(final Presentation presentation) {
			this.presentation = presentation;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LtiResourceItem.LtiResourceItemBuilder icon(final Image icon) {
			this.icon = icon;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LtiResourceItem.LtiResourceItemBuilder thumbnail(final Image thumbnail) {
			this.thumbnail = thumbnail;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LtiResourceItem.LtiResourceItemBuilder window(final Window window) {
			this.window = window;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LtiResourceItem.LtiResourceItemBuilder iFrame(final IFrame iFrame) {
			this.iFrame = iFrame;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LtiResourceItem.LtiResourceItemBuilder available(final Duration available) {
			this.available = available;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LtiResourceItem.LtiResourceItemBuilder submission(final Duration submission) {
			this.submission = submission;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LtiResourceItem.LtiResourceItemBuilder custom(final Map<String, Object> custom) {
			this.custom = custom;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		public LtiResourceItem build() {
			return new LtiResourceItem(this.title, this.url, this.presentation, this.icon, this.thumbnail, this.window, this.iFrame, this.available, this.submission, this.custom);
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public java.lang.String toString() {
			return "LtiResourceItem.LtiResourceItemBuilder(title=" + this.title + ", url=" + this.url + ", presentation=" + this.presentation + ", icon=" + this.icon + ", thumbnail=" + this.thumbnail + ", window=" + this.window + ", iFrame=" + this.iFrame + ", available=" + this.available + ", submission=" + this.submission + ", custom=" + this.custom + ")";
		}
	}

	@java.lang.SuppressWarnings("all")
	public static LtiResourceItem.LtiResourceItemBuilder builder() {
		return new LtiResourceItem.LtiResourceItemBuilder();
	}

	/**
	 * String, plain text to use as the title or heading for content.
	 */
	@java.lang.SuppressWarnings("all")
	public void setTitle(final String title) {
		this.title = title;
	}

	/**
	 * Fully qualified url of the resource. If absent, the base LTI URL of the tool must be used for launch.
	 */
	@java.lang.SuppressWarnings("all")
	public void setUrl(final String url) {
		this.url = url;
	}

	@java.lang.SuppressWarnings("all")
	public void setPresentation(final Presentation presentation) {
		this.presentation = presentation;
	}

	/**
	 * Fully qualified URL of an icon image to be placed with the file. A platform may not support the display of icons,
	 * but where it does, it may choose to use a local copy of the icon rather than linking to the URL provided (which
	 * would also allow it to resize the image to suit its needs).
	 */
	@java.lang.SuppressWarnings("all")
	public void setIcon(final Image icon) {
		this.icon = icon;
	}

	/**
	 * Fully qualified URL of a thumbnail image to be made a hyperlink. This allows the hyperlink to be opened within
	 * the platform from text or an image, or from both.
	 */
	@java.lang.SuppressWarnings("all")
	public void setThumbnail(final Image thumbnail) {
		this.thumbnail = thumbnail;
	}

	/**
	 * A map of key/value custom parameters. Those parameters must be included in the LtiResourceLinkRequest payload.
	 * Value may include substitution parameters as defined in the LTI Core Specification [LTI-13].
	 */
	@java.lang.SuppressWarnings("all")
	public void setCustom(final Map<String, Object> custom) {
		this.custom = custom;
	}

	@java.lang.SuppressWarnings("all")
	public void setWindow(final Window window) {
		this.window = window;
	}

	/**
	 * The iframe property indicates the resource can be embedded using an IFrame
	 */
	@java.lang.SuppressWarnings("all")
	public void setIFrame(final IFrame iFrame) {
		this.iFrame = iFrame;
	}

	/**
	 * A lineItem object that indicates this activity is expected to receive scores; the platform may automatically
	 * create a corresponding line item when the resource link is created, using the maximum score as the default maximum points.
	 */
	@java.lang.SuppressWarnings("all")
	public void setLineItem(final LineItem lineItem) {
		this.lineItem = lineItem;
	}

	/**
	 * Indicates the initial start and end time this activity should be made available to learners. A platform may choose
	 * to make an item not accessible by hiding it, or by disabling the link, or some other method which prevents the link
	 * from being opened by a learner. The initial value may subsequently be changed within the platform and the tool may use
	 * the ResourceLink.available.startDateTime and ResourceLink.available.endDateTime substitution parameters defined in
	 * LTI Core specification [LTI-13] within custom parameters to get the actual values at launch time.
	 */
	@java.lang.SuppressWarnings("all")
	public void setAvailable(final Duration available) {
		this.available = available;
	}

	/**
	 * Indicates the initial start and end time submissions for this activity can be made by learners. The initial value
	 * may subsequently be changed within the platform and the tool may use the ResourceLink.submission.startDateTime and
	 * ResourceLink.submission.endDateTime substitution parameters defined in LTI Core specification [LTI-13] within
	 * custom parameters to get the actual values at launch time.
	 */
	@java.lang.SuppressWarnings("all")
	public void setSubmission(final Duration submission) {
		this.submission = submission;
	}

	/**
	 * String, plain text to use as the title or heading for content.
	 */
	@java.lang.SuppressWarnings("all")
	public String getTitle() {
		return this.title;
	}

	/**
	 * Fully qualified url of the resource. If absent, the base LTI URL of the tool must be used for launch.
	 */
	@java.lang.SuppressWarnings("all")
	public String getUrl() {
		return this.url;
	}

	@java.lang.SuppressWarnings("all")
	public Presentation getPresentation() {
		return this.presentation;
	}

	/**
	 * Fully qualified URL of an icon image to be placed with the file. A platform may not support the display of icons,
	 * but where it does, it may choose to use a local copy of the icon rather than linking to the URL provided (which
	 * would also allow it to resize the image to suit its needs).
	 */
	@java.lang.SuppressWarnings("all")
	public Image getIcon() {
		return this.icon;
	}

	/**
	 * Fully qualified URL of a thumbnail image to be made a hyperlink. This allows the hyperlink to be opened within
	 * the platform from text or an image, or from both.
	 */
	@java.lang.SuppressWarnings("all")
	public Image getThumbnail() {
		return this.thumbnail;
	}

	/**
	 * A map of key/value custom parameters. Those parameters must be included in the LtiResourceLinkRequest payload.
	 * Value may include substitution parameters as defined in the LTI Core Specification [LTI-13].
	 */
	@java.lang.SuppressWarnings("all")
	public Map<String, Object> getCustom() {
		return this.custom;
	}

	@java.lang.SuppressWarnings("all")
	public Window getWindow() {
		return this.window;
	}

	/**
	 * The iframe property indicates the resource can be embedded using an IFrame
	 */
	@java.lang.SuppressWarnings("all")
	public IFrame getIFrame() {
		return this.iFrame;
	}

	/**
	 * A lineItem object that indicates this activity is expected to receive scores; the platform may automatically
	 * create a corresponding line item when the resource link is created, using the maximum score as the default maximum points.
	 */
	@java.lang.SuppressWarnings("all")
	public LineItem getLineItem() {
		return this.lineItem;
	}

	/**
	 * Indicates the initial start and end time this activity should be made available to learners. A platform may choose
	 * to make an item not accessible by hiding it, or by disabling the link, or some other method which prevents the link
	 * from being opened by a learner. The initial value may subsequently be changed within the platform and the tool may use
	 * the ResourceLink.available.startDateTime and ResourceLink.available.endDateTime substitution parameters defined in
	 * LTI Core specification [LTI-13] within custom parameters to get the actual values at launch time.
	 */
	@java.lang.SuppressWarnings("all")
	public Duration getAvailable() {
		return this.available;
	}

	/**
	 * Indicates the initial start and end time submissions for this activity can be made by learners. The initial value
	 * may subsequently be changed within the platform and the tool may use the ResourceLink.submission.startDateTime and
	 * ResourceLink.submission.endDateTime substitution parameters defined in LTI Core specification [LTI-13] within
	 * custom parameters to get the actual values at launch time.
	 */
	@java.lang.SuppressWarnings("all")
	public Duration getSubmission() {
		return this.submission;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "LtiResourceItem(super=" + super.toString() + ", title=" + this.getTitle() + ", url=" + this.getUrl() + ", presentation=" + this.getPresentation() + ", icon=" + this.getIcon() + ", thumbnail=" + this.getThumbnail() + ", custom=" + this.getCustom() + ", window=" + this.getWindow() + ", iFrame=" + this.getIFrame() + ", lineItem=" + this.getLineItem() + ", available=" + this.getAvailable() + ", submission=" + this.getSubmission() + ")";
	}
}
