// Generated by delombok at Fri Jul 14 17:42:49 CEST 2023
package edu.uoc.lti.ags;

import java.time.Instant;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * @author Created by xaracil@uoc.edu
 */
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class Score {
	/**
	 * Recipient of the score, usually a student. Must be present when publishing a score update through Scores
	 */
	private String userId;
	/**
	 * Current score received in the tool for this line item and user, in scale with scoreMaximum
	 */
	private double scoreGiven;
	/**
	 * Maximum possible score for this result; It must be present if scoreGiven is present.
	 */
	private double scoreMaximum;
	/**
	 * Comment visible to the student about this score.
	 */
	private String comment;
	/**
	 * Date and time when the score was modified in the tool. Should use subsecond precision.
	 */
	private Instant timestamp;

	public String getTimestamp() {
		return timestamp != null ? timestamp.toString() : null;
	}

	/**
	 * Indicate to the tool platform the status of the user towards the activity's completion.
	 * [ Initialized, Started, InProgress, Submitted, Completed ]
	 */
	private ActivityProgressEnum activityProgress;

	public String getActivityProgress() {
		return activityProgress.getValue();
	}

	/**
	 * Indicate to the platform the status of the grading process, including allowing to inform when human intervention is needed. A value other than FullyGraded may cause the tool platform to ignore the scoreGiven value if present.
	 * [ NotReady, Failed, Pending, PendingManual, FullyGraded ]
	 */
	private GradingProgressEnum gradingProgress;

	public String getGradingProgress() {
		return gradingProgress.getValue();
	}

	@java.lang.SuppressWarnings("all")
	Score(final String userId, final double scoreGiven, final double scoreMaximum, final String comment, final Instant timeStamp, final ActivityProgressEnum activityProgress, final GradingProgressEnum gradingProgress) {
		this.userId = userId;
		this.scoreGiven = scoreGiven;
		this.scoreMaximum = scoreMaximum;
		this.comment = comment;
		this.timestamp = timeStamp;
		this.activityProgress = activityProgress;
		this.gradingProgress = gradingProgress;
	}


	@java.lang.SuppressWarnings("all")
	public static class ScoreBuilder {
		@java.lang.SuppressWarnings("all")
		private String userId;
		@java.lang.SuppressWarnings("all")
		private double scoreGiven;
		@java.lang.SuppressWarnings("all")
		private double scoreMaximum;
		@java.lang.SuppressWarnings("all")
		private String comment;
		@java.lang.SuppressWarnings("all")
		private Instant timeStamp;
		@java.lang.SuppressWarnings("all")
		private ActivityProgressEnum activityProgress;
		@java.lang.SuppressWarnings("all")
		private GradingProgressEnum gradingProgress;

		@java.lang.SuppressWarnings("all")
		ScoreBuilder() {
		}

		/**
		 * Recipient of the score, usually a student. Must be present when publishing a score update through Scores
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public Score.ScoreBuilder userId(final String userId) {
			this.userId = userId;
			return this;
		}

		/**
		 * Current score received in the tool for this line item and user, in scale with scoreMaximum
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public Score.ScoreBuilder scoreGiven(final double scoreGiven) {
			this.scoreGiven = scoreGiven;
			return this;
		}

		/**
		 * Maximum possible score for this result; It must be present if scoreGiven is present.
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public Score.ScoreBuilder scoreMaximum(final double scoreMaximum) {
			this.scoreMaximum = scoreMaximum;
			return this;
		}

		/**
		 * Comment visible to the student about this score.
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public Score.ScoreBuilder comment(final String comment) {
			this.comment = comment;
			return this;
		}

		/**
		 * Date and time when the score was modified in the tool. Should use subsecond precision.
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public Score.ScoreBuilder timeStamp(final Instant timeStamp) {
			this.timeStamp = timeStamp;
			return this;
		}

		/**
		 * Indicate to the tool platform the status of the user towards the activity's completion.
		 * [ Initialized, Started, InProgress, Submitted, Completed ]
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public Score.ScoreBuilder activityProgress(final ActivityProgressEnum activityProgress) {
			this.activityProgress = activityProgress;
			return this;
		}

		/**
		 * Indicate to the platform the status of the grading process, including allowing to inform when human intervention is needed. A value other than FullyGraded may cause the tool platform to ignore the scoreGiven value if present.
		 * [ NotReady, Failed, Pending, PendingManual, FullyGraded ]
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public Score.ScoreBuilder gradingProgress(final GradingProgressEnum gradingProgress) {
			this.gradingProgress = gradingProgress;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		public Score build() {
			return new Score(this.userId, this.scoreGiven, this.scoreMaximum, this.comment, this.timeStamp, this.activityProgress, this.gradingProgress);
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public java.lang.String toString() {
			return "Score.ScoreBuilder(userId=" + this.userId + ", scoreGiven=" + this.scoreGiven + ", scoreMaximum=" + this.scoreMaximum + ", comment=" + this.comment + ", timeStamp=" + this.timeStamp + ", activityProgress=" + this.activityProgress + ", gradingProgress=" + this.gradingProgress + ")";
		}
	}

	@java.lang.SuppressWarnings("all")
	public static Score.ScoreBuilder builder() {
		return new Score.ScoreBuilder();
	}

	/**
	 * Recipient of the score, usually a student. Must be present when publishing a score update through Scores
	 */
	@java.lang.SuppressWarnings("all")
	public void setUserId(final String userId) {
		this.userId = userId;
	}

	/**
	 * Current score received in the tool for this line item and user, in scale with scoreMaximum
	 */
	@java.lang.SuppressWarnings("all")
	public void setScoreGiven(final double scoreGiven) {
		this.scoreGiven = scoreGiven;
	}

	/**
	 * Maximum possible score for this result; It must be present if scoreGiven is present.
	 */
	@java.lang.SuppressWarnings("all")
	public void setScoreMaximum(final double scoreMaximum) {
		this.scoreMaximum = scoreMaximum;
	}

	/**
	 * Comment visible to the student about this score.
	 */
	@java.lang.SuppressWarnings("all")
	public void setComment(final String comment) {
		this.comment = comment;
	}

	/**
	 * Date and time when the score was modified in the tool. Should use subsecond precision.
	 */
	@java.lang.SuppressWarnings("all")
	public void setTimestamp(final Instant timeStamp) {
		this.timestamp = timeStamp;
	}

	/**
	 * Indicate to the tool platform the status of the user towards the activity's completion.
	 * [ Initialized, Started, InProgress, Submitted, Completed ]
	 */
	@java.lang.SuppressWarnings("all")
	public void setActivityProgress(final ActivityProgressEnum activityProgress) {
		this.activityProgress = activityProgress;
	}

	/**
	 * Indicate to the platform the status of the grading process, including allowing to inform when human intervention is needed. A value other than FullyGraded may cause the tool platform to ignore the scoreGiven value if present.
	 * [ NotReady, Failed, Pending, PendingManual, FullyGraded ]
	 */
	@java.lang.SuppressWarnings("all")
	public void setGradingProgress(final GradingProgressEnum gradingProgress) {
		this.gradingProgress = gradingProgress;
	}

	/**
	 * Recipient of the score, usually a student. Must be present when publishing a score update through Scores
	 */
	@java.lang.SuppressWarnings("all")
	public String getUserId() {
		return this.userId;
	}

	/**
	 * Current score received in the tool for this line item and user, in scale with scoreMaximum
	 */
	@java.lang.SuppressWarnings("all")
	public double getScoreGiven() {
		return this.scoreGiven;
	}

	/**
	 * Maximum possible score for this result; It must be present if scoreGiven is present.
	 */
	@java.lang.SuppressWarnings("all")
	public double getScoreMaximum() {
		return this.scoreMaximum;
	}

	/**
	 * Comment visible to the student about this score.
	 */
	@java.lang.SuppressWarnings("all")
	public String getComment() {
		return this.comment;
	}
}
